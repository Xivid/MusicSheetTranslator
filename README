---------------
Piano
By Yang Zhifei
---------------

This is a complete implementation of prog exam 2014. I wrote, compiled and tested it on Mac OS X 10.11. The flex and bison I used to develop it is the defaultly included ones in XCode Development Tools, but I have tested that the GNU ones on virtue.cs.hku.hk also work fine.

The main idea of my program is to store all the notes in a linked list, each node indicating a note. That is to say, a node is a struct containing all information of a note, such as name, octave and duration. Newline characters are represented by nodes with note = -1. The printList function visits the linked list from start to end and output the corresponding note (or newline) of each node.

To use it, just run "make" in a shell on this directory and the generated program "piano" will read tunes from piano.txt and output keystrokes to output.txt. I modified the Makefile given by the teacher in the skeleton (but did not use the code in the skeleton, as it is too fixed to implement my own idea). The program "piano" reads supports both file IO and standard IO, specified by the two parameters given by user. If both parameters are missing, it will use standard IO, and will not output anything until receiving an EOF(Ctrl+D). If you want it to read from a text file, you should give the input filename in the first parameter, like "./piano piano.txt". If you also want it to write to a file, you should give both parameters, with the second the output filename, like "./piano piano.txt output.txt". 

You can test the program using piano.txt, which includes the three samples given by teacher as well as another sample written by myself. (I added in piano.txt a brief score of Always with Me, which is composed by Joe Hisaishi, just because I like playing it on the piano. :) )

My program can ignore line-comments begining with a '#', so you do not need to remove them manually. Another good feature, I think, is that I keep a space between different [] expressions, so [dr][md] results in "ty ut" instead of "tyut". The space has no semantic meaning, just to make it easier for people to recognise between parts of short notes. Also, newline characters are kept well, making the output more readable and beautiful.

I used git for version control, so you can easily see how I developed it step by step. Thank you for your reading!
