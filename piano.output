Terminals which are not used

   VARIABLE
   INTEGER


State 1 conflicts: 6 shift/reduce, 7 reduce/reduce
State 7 conflicts: 5 shift/reduce, 1 reduce/reduce
State 8 conflicts: 1 shift/reduce
State 9 conflicts: 5 shift/reduce, 9 reduce/reduce
State 10 conflicts: 4 shift/reduce
State 12 conflicts: 5 shift/reduce, 1 reduce/reduce
State 17 conflicts: 5 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: song $end

    1 song: song stmt END
    2     | song stmt
    3     | /* empty */

    4 stmt: expr stmt
    5     | '^' '(' stmt ')'
    6     | '_' '(' stmt ')'
    7     | '[' stmt ']'
    8     | /* empty */

    9 expr: note expr
   10     | note '-'
   11     | note '-' '-'
   12     | note '-' '-' '-'
   13     | '(' expr ')' '-'
   14     | '(' expr ')' '-' '-'
   15     | '(' expr ')' '-' '-' '-'
   16     | /* empty */

   17 note: NOTE
   18     | '_' NOTE
   19     | '^' NOTE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 5 6 13 14 15
')' (41) 5 6 13 14 15
'-' (45) 10 11 12 13 14 15
'[' (91) 7
']' (93) 7
'^' (94) 5 19
'_' (95) 6 18
error (256)
NOTE (258) 17 18 19
VARIABLE (259)
INTEGER (260)
END (261) 1


Nonterminals, with rules where they appear

$accept (14)
    on left: 0
song (15)
    on left: 1 2 3, on right: 0 1 2
stmt (16)
    on left: 4 5 6 7 8, on right: 1 2 4 5 6 7
expr (17)
    on left: 9 10 11 12 13 14 15 16, on right: 4 9 13 14 15
note (18)
    on left: 17 18 19, on right: 9 10 11 12


state 0

    0 $accept: . song $end

    $default  reduce using rule 3 (song)

    song  go to state 1


state 1

    0 $accept: song . $end
    1 song: song . stmt END
    2     | song . stmt

    $end  shift, and go to state 2
    NOTE  shift, and go to state 3
    '^'   shift, and go to state 4
    '('   shift, and go to state 5
    '_'   shift, and go to state 6
    '['   shift, and go to state 7

    $end      [reduce using rule 8 (stmt)]
    $end      [reduce using rule 16 (expr)]
    NOTE      [reduce using rule 8 (stmt)]
    NOTE      [reduce using rule 16 (expr)]
    END       reduce using rule 8 (stmt)
    END       [reduce using rule 16 (expr)]
    '^'       [reduce using rule 8 (stmt)]
    '^'       [reduce using rule 16 (expr)]
    '('       [reduce using rule 8 (stmt)]
    '('       [reduce using rule 16 (expr)]
    '_'       [reduce using rule 8 (stmt)]
    '_'       [reduce using rule 16 (expr)]
    '['       [reduce using rule 8 (stmt)]
    '['       [reduce using rule 16 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 8
    expr  go to state 9
    note  go to state 10


state 2

    0 $accept: song $end .

    $default  accept


state 3

   17 note: NOTE .

    $default  reduce using rule 17 (note)


state 4

    5 stmt: '^' . '(' stmt ')'
   19 note: '^' . NOTE

    NOTE  shift, and go to state 11
    '('   shift, and go to state 12


state 5

   13 expr: '(' . expr ')' '-'
   14     | '(' . expr ')' '-' '-'
   15     | '(' . expr ')' '-' '-' '-'

    NOTE  shift, and go to state 3
    '^'   shift, and go to state 13
    '('   shift, and go to state 5
    '_'   shift, and go to state 14

    $default  reduce using rule 16 (expr)

    expr  go to state 15
    note  go to state 10


state 6

    6 stmt: '_' . '(' stmt ')'
   18 note: '_' . NOTE

    NOTE  shift, and go to state 16
    '('   shift, and go to state 17


state 7

    7 stmt: '[' . stmt ']'

    NOTE  shift, and go to state 3
    '^'   shift, and go to state 4
    '('   shift, and go to state 5
    '_'   shift, and go to state 6
    '['   shift, and go to state 7

    NOTE      [reduce using rule 16 (expr)]
    '^'       [reduce using rule 16 (expr)]
    '('       [reduce using rule 16 (expr)]
    '_'       [reduce using rule 16 (expr)]
    '['       [reduce using rule 16 (expr)]
    ']'       reduce using rule 8 (stmt)
    ']'       [reduce using rule 16 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 18
    expr  go to state 9
    note  go to state 10


state 8

    1 song: song stmt . END
    2     | song stmt .

    END  shift, and go to state 19

    END       [reduce using rule 2 (song)]
    $default  reduce using rule 2 (song)


state 9

    4 stmt: expr . stmt

    NOTE  shift, and go to state 3
    '^'   shift, and go to state 4
    '('   shift, and go to state 5
    '_'   shift, and go to state 6
    '['   shift, and go to state 7

    $end      reduce using rule 8 (stmt)
    $end      [reduce using rule 16 (expr)]
    NOTE      [reduce using rule 8 (stmt)]
    NOTE      [reduce using rule 16 (expr)]
    END       reduce using rule 8 (stmt)
    END       [reduce using rule 16 (expr)]
    '^'       [reduce using rule 8 (stmt)]
    '^'       [reduce using rule 16 (expr)]
    '('       [reduce using rule 8 (stmt)]
    '('       [reduce using rule 16 (expr)]
    ')'       reduce using rule 8 (stmt)
    ')'       [reduce using rule 16 (expr)]
    '_'       [reduce using rule 8 (stmt)]
    '_'       [reduce using rule 16 (expr)]
    '['       [reduce using rule 8 (stmt)]
    '['       [reduce using rule 16 (expr)]
    ']'       reduce using rule 8 (stmt)
    ']'       [reduce using rule 16 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 20
    expr  go to state 9
    note  go to state 10


state 10

    9 expr: note . expr
   10     | note . '-'
   11     | note . '-' '-'
   12     | note . '-' '-' '-'

    NOTE  shift, and go to state 3
    '^'   shift, and go to state 13
    '('   shift, and go to state 5
    '_'   shift, and go to state 14
    '-'   shift, and go to state 21

    NOTE      [reduce using rule 16 (expr)]
    '^'       [reduce using rule 16 (expr)]
    '('       [reduce using rule 16 (expr)]
    '_'       [reduce using rule 16 (expr)]
    $default  reduce using rule 16 (expr)

    expr  go to state 22
    note  go to state 10


state 11

   19 note: '^' NOTE .

    $default  reduce using rule 19 (note)


state 12

    5 stmt: '^' '(' . stmt ')'

    NOTE  shift, and go to state 3
    '^'   shift, and go to state 4
    '('   shift, and go to state 5
    '_'   shift, and go to state 6
    '['   shift, and go to state 7

    NOTE      [reduce using rule 16 (expr)]
    '^'       [reduce using rule 16 (expr)]
    '('       [reduce using rule 16 (expr)]
    ')'       reduce using rule 8 (stmt)
    ')'       [reduce using rule 16 (expr)]
    '_'       [reduce using rule 16 (expr)]
    '['       [reduce using rule 16 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 23
    expr  go to state 9
    note  go to state 10


state 13

   19 note: '^' . NOTE

    NOTE  shift, and go to state 11


state 14

   18 note: '_' . NOTE

    NOTE  shift, and go to state 16


state 15

   13 expr: '(' expr . ')' '-'
   14     | '(' expr . ')' '-' '-'
   15     | '(' expr . ')' '-' '-' '-'

    ')'  shift, and go to state 24


state 16

   18 note: '_' NOTE .

    $default  reduce using rule 18 (note)


state 17

    6 stmt: '_' '(' . stmt ')'

    NOTE  shift, and go to state 3
    '^'   shift, and go to state 4
    '('   shift, and go to state 5
    '_'   shift, and go to state 6
    '['   shift, and go to state 7

    NOTE      [reduce using rule 16 (expr)]
    '^'       [reduce using rule 16 (expr)]
    '('       [reduce using rule 16 (expr)]
    ')'       reduce using rule 8 (stmt)
    ')'       [reduce using rule 16 (expr)]
    '_'       [reduce using rule 16 (expr)]
    '['       [reduce using rule 16 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 25
    expr  go to state 9
    note  go to state 10


state 18

    7 stmt: '[' stmt . ']'

    ']'  shift, and go to state 26


state 19

    1 song: song stmt END .

    $default  reduce using rule 1 (song)


state 20

    4 stmt: expr stmt .

    $default  reduce using rule 4 (stmt)


state 21

   10 expr: note '-' .
   11     | note '-' . '-'
   12     | note '-' . '-' '-'

    '-'  shift, and go to state 27

    $default  reduce using rule 10 (expr)


state 22

    9 expr: note expr .

    $default  reduce using rule 9 (expr)


state 23

    5 stmt: '^' '(' stmt . ')'

    ')'  shift, and go to state 28


state 24

   13 expr: '(' expr ')' . '-'
   14     | '(' expr ')' . '-' '-'
   15     | '(' expr ')' . '-' '-' '-'

    '-'  shift, and go to state 29


state 25

    6 stmt: '_' '(' stmt . ')'

    ')'  shift, and go to state 30


state 26

    7 stmt: '[' stmt ']' .

    $default  reduce using rule 7 (stmt)


state 27

   11 expr: note '-' '-' .
   12     | note '-' '-' . '-'

    '-'  shift, and go to state 31

    $default  reduce using rule 11 (expr)


state 28

    5 stmt: '^' '(' stmt ')' .

    $default  reduce using rule 5 (stmt)


state 29

   13 expr: '(' expr ')' '-' .
   14     | '(' expr ')' '-' . '-'
   15     | '(' expr ')' '-' . '-' '-'

    '-'  shift, and go to state 32

    $default  reduce using rule 13 (expr)


state 30

    6 stmt: '_' '(' stmt ')' .

    $default  reduce using rule 6 (stmt)


state 31

   12 expr: note '-' '-' '-' .

    $default  reduce using rule 12 (expr)


state 32

   14 expr: '(' expr ')' '-' '-' .
   15     | '(' expr ')' '-' '-' . '-'

    '-'  shift, and go to state 33

    $default  reduce using rule 14 (expr)


state 33

   15 expr: '(' expr ')' '-' '-' '-' .

    $default  reduce using rule 15 (expr)
