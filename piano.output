State 1 conflicts: 9 shift/reduce, 11 reduce/reduce
State 9 conflicts: 8 shift/reduce, 1 reduce/reduce
State 11 conflicts: 1 shift/reduce
State 12 conflicts: 9 shift/reduce, 15 reduce/reduce
State 13 conflicts: 7 shift/reduce
State 28 conflicts: 8 shift/reduce, 15 reduce/reduce
State 31 conflicts: 9 shift/reduce, 11 reduce/reduce
State 32 conflicts: 9 shift/reduce, 11 reduce/reduce
State 33 conflicts: 9 shift/reduce, 11 reduce/reduce
State 35 conflicts: 9 shift/reduce, 11 reduce/reduce


Grammar

    0 $accept: song $end

    1 song: song stmt END
    2     | song stmt
    3     | /* empty */

    4 stmt: expr stmt
    5     | expr newline stmt
    6     | '^' '(' song ')'
    7     | '_' '(' song ')'
    8     | '[' stmt ']'
    9     | /* empty */

   10 expr: note expr
   11     | note '-'
   12     | note '-' '-'
   13     | note '-' '-' '-'
   14     | '(' expr ')' '-'
   15     | '(' expr ')' '-' '-'
   16     | '(' expr ')' '-' '-' '-'
   17     | VARIABLE '=' song ';'
   18     | '$' VARIABLE
   19     | INTEGER '{' song '}'
   20     | /* empty */

   21 note: NOTE
   22     | '_' NOTE
   23     | '^' NOTE

   24 newline: '\n'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 24
'$' (36) 18
'(' (40) 6 7 14 15 16
')' (41) 6 7 14 15 16
'-' (45) 11 12 13 14 15 16
';' (59) 17
'=' (61) 17
'[' (91) 8
']' (93) 8
'^' (94) 6 23
'_' (95) 7 22
'{' (123) 19
'}' (125) 19
error (256)
NOTE (258) 21 22 23
VARIABLE (259) 17 18
INTEGER (260) 19
END (261) 1


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
song (21)
    on left: 1 2 3, on right: 0 1 2 6 7 17 19
stmt (22)
    on left: 4 5 6 7 8 9, on right: 1 2 4 5 8
expr (23)
    on left: 10 11 12 13 14 15 16 17 18 19 20, on right: 4 5 10 14
    15 16
note (24)
    on left: 21 22 23, on right: 10 11 12 13
newline (25)
    on left: 24, on right: 5


state 0

    0 $accept: . song $end

    $default  reduce using rule 3 (song)

    song  go to state 1


state 1

    0 $accept: song . $end
    1 song: song . stmt END
    2     | song . stmt

    $end      shift, and go to state 2
    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    $end      [reduce using rule 9 (stmt)]
    $end      [reduce using rule 20 (expr)]
    NOTE      [reduce using rule 9 (stmt)]
    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 9 (stmt)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 9 (stmt)]
    INTEGER   [reduce using rule 20 (expr)]
    END       reduce using rule 9 (stmt)
    END       [reduce using rule 20 (expr)]
    '^'       [reduce using rule 9 (stmt)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 9 (stmt)]
    '('       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 9 (stmt)]
    '_'       [reduce using rule 20 (expr)]
    '['       [reduce using rule 9 (stmt)]
    '['       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 9 (stmt)]
    '$'       [reduce using rule 20 (expr)]
    '\n'      reduce using rule 9 (stmt)
    '\n'      [reduce using rule 20 (expr)]
    $default  reduce using rule 9 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 2

    0 $accept: song $end .

    $default  accept


state 3

   21 note: NOTE .

    $default  reduce using rule 21 (note)


state 4

   17 expr: VARIABLE . '=' song ';'

    '='  shift, and go to state 14


state 5

   19 expr: INTEGER . '{' song '}'

    '{'  shift, and go to state 15


state 6

    6 stmt: '^' . '(' song ')'
   23 note: '^' . NOTE

    NOTE  shift, and go to state 16
    '('   shift, and go to state 17


state 7

   14 expr: '(' . expr ')' '-'
   15     | '(' . expr ')' '-' '-'
   16     | '(' . expr ')' '-' '-' '-'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 18
    '('       shift, and go to state 7
    '_'       shift, and go to state 19
    '$'       shift, and go to state 10

    $default  reduce using rule 20 (expr)

    expr  go to state 20
    note  go to state 13


state 8

    7 stmt: '_' . '(' song ')'
   22 note: '_' . NOTE

    NOTE  shift, and go to state 21
    '('   shift, and go to state 22


state 9

    8 stmt: '[' . stmt ']'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 20 (expr)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 20 (expr)]
    '['       [reduce using rule 20 (expr)]
    ']'       reduce using rule 9 (stmt)
    ']'       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 20 (expr)]
    '\n'      reduce using rule 20 (expr)
    $default  reduce using rule 9 (stmt)

    stmt  go to state 23
    expr  go to state 12
    note  go to state 13


state 10

   18 expr: '$' . VARIABLE

    VARIABLE  shift, and go to state 24


state 11

    1 song: song stmt . END
    2     | song stmt .

    END  shift, and go to state 25

    END       [reduce using rule 2 (song)]
    $default  reduce using rule 2 (song)


state 12

    4 stmt: expr . stmt
    5     | expr . newline stmt

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10
    '\n'      shift, and go to state 26

    $end      reduce using rule 9 (stmt)
    $end      [reduce using rule 20 (expr)]
    NOTE      [reduce using rule 9 (stmt)]
    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 9 (stmt)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 9 (stmt)]
    INTEGER   [reduce using rule 20 (expr)]
    END       reduce using rule 9 (stmt)
    END       [reduce using rule 20 (expr)]
    '^'       [reduce using rule 9 (stmt)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 9 (stmt)]
    '('       [reduce using rule 20 (expr)]
    ')'       reduce using rule 9 (stmt)
    ')'       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 9 (stmt)]
    '_'       [reduce using rule 20 (expr)]
    '['       [reduce using rule 9 (stmt)]
    '['       [reduce using rule 20 (expr)]
    ']'       reduce using rule 9 (stmt)
    ']'       [reduce using rule 20 (expr)]
    ';'       reduce using rule 9 (stmt)
    ';'       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 9 (stmt)]
    '$'       [reduce using rule 20 (expr)]
    '}'       reduce using rule 9 (stmt)
    '}'       [reduce using rule 20 (expr)]
    '\n'      [reduce using rule 9 (stmt)]
    '\n'      [reduce using rule 20 (expr)]
    $default  reduce using rule 9 (stmt)

    stmt     go to state 27
    expr     go to state 12
    note     go to state 13
    newline  go to state 28


state 13

   10 expr: note . expr
   11     | note . '-'
   12     | note . '-' '-'
   13     | note . '-' '-' '-'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 18
    '('       shift, and go to state 7
    '_'       shift, and go to state 19
    '-'       shift, and go to state 29
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 20 (expr)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 20 (expr)]
    $default  reduce using rule 20 (expr)

    expr  go to state 30
    note  go to state 13


state 14

   17 expr: VARIABLE '=' . song ';'

    $default  reduce using rule 3 (song)

    song  go to state 31


state 15

   19 expr: INTEGER '{' . song '}'

    $default  reduce using rule 3 (song)

    song  go to state 32


state 16

   23 note: '^' NOTE .

    $default  reduce using rule 23 (note)


state 17

    6 stmt: '^' '(' . song ')'

    $default  reduce using rule 3 (song)

    song  go to state 33


state 18

   23 note: '^' . NOTE

    NOTE  shift, and go to state 16


state 19

   22 note: '_' . NOTE

    NOTE  shift, and go to state 21


state 20

   14 expr: '(' expr . ')' '-'
   15     | '(' expr . ')' '-' '-'
   16     | '(' expr . ')' '-' '-' '-'

    ')'  shift, and go to state 34


state 21

   22 note: '_' NOTE .

    $default  reduce using rule 22 (note)


state 22

    7 stmt: '_' '(' . song ')'

    $default  reduce using rule 3 (song)

    song  go to state 35


state 23

    8 stmt: '[' stmt . ']'

    ']'  shift, and go to state 36


state 24

   18 expr: '$' VARIABLE .

    $default  reduce using rule 18 (expr)


state 25

    1 song: song stmt END .

    $default  reduce using rule 1 (song)


state 26

   24 newline: '\n' .

    $default  reduce using rule 24 (newline)


state 27

    4 stmt: expr stmt .

    $default  reduce using rule 4 (stmt)


state 28

    5 stmt: expr newline . stmt

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    $end      reduce using rule 9 (stmt)
    $end      [reduce using rule 20 (expr)]
    NOTE      [reduce using rule 9 (stmt)]
    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 9 (stmt)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 9 (stmt)]
    INTEGER   [reduce using rule 20 (expr)]
    END       reduce using rule 9 (stmt)
    END       [reduce using rule 20 (expr)]
    '^'       [reduce using rule 9 (stmt)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 9 (stmt)]
    '('       [reduce using rule 20 (expr)]
    ')'       reduce using rule 9 (stmt)
    ')'       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 9 (stmt)]
    '_'       [reduce using rule 20 (expr)]
    '['       [reduce using rule 9 (stmt)]
    '['       [reduce using rule 20 (expr)]
    ']'       reduce using rule 9 (stmt)
    ']'       [reduce using rule 20 (expr)]
    ';'       reduce using rule 9 (stmt)
    ';'       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 9 (stmt)]
    '$'       [reduce using rule 20 (expr)]
    '}'       reduce using rule 9 (stmt)
    '}'       [reduce using rule 20 (expr)]
    '\n'      reduce using rule 9 (stmt)
    '\n'      [reduce using rule 20 (expr)]
    $default  reduce using rule 9 (stmt)

    stmt  go to state 37
    expr  go to state 12
    note  go to state 13


state 29

   11 expr: note '-' .
   12     | note '-' . '-'
   13     | note '-' . '-' '-'

    '-'  shift, and go to state 38

    $default  reduce using rule 11 (expr)


state 30

   10 expr: note expr .

    $default  reduce using rule 10 (expr)


state 31

    1 song: song . stmt END
    2     | song . stmt
   17 expr: VARIABLE '=' song . ';'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    ';'       shift, and go to state 39
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 9 (stmt)]
    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 9 (stmt)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 9 (stmt)]
    INTEGER   [reduce using rule 20 (expr)]
    END       reduce using rule 9 (stmt)
    END       [reduce using rule 20 (expr)]
    '^'       [reduce using rule 9 (stmt)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 9 (stmt)]
    '('       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 9 (stmt)]
    '_'       [reduce using rule 20 (expr)]
    '['       [reduce using rule 9 (stmt)]
    '['       [reduce using rule 20 (expr)]
    ';'       [reduce using rule 9 (stmt)]
    ';'       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 9 (stmt)]
    '$'       [reduce using rule 20 (expr)]
    '\n'      reduce using rule 9 (stmt)
    '\n'      [reduce using rule 20 (expr)]
    $default  reduce using rule 9 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 32

    1 song: song . stmt END
    2     | song . stmt
   19 expr: INTEGER '{' song . '}'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10
    '}'       shift, and go to state 40

    NOTE      [reduce using rule 9 (stmt)]
    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 9 (stmt)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 9 (stmt)]
    INTEGER   [reduce using rule 20 (expr)]
    END       reduce using rule 9 (stmt)
    END       [reduce using rule 20 (expr)]
    '^'       [reduce using rule 9 (stmt)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 9 (stmt)]
    '('       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 9 (stmt)]
    '_'       [reduce using rule 20 (expr)]
    '['       [reduce using rule 9 (stmt)]
    '['       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 9 (stmt)]
    '$'       [reduce using rule 20 (expr)]
    '}'       [reduce using rule 9 (stmt)]
    '}'       [reduce using rule 20 (expr)]
    '\n'      reduce using rule 9 (stmt)
    '\n'      [reduce using rule 20 (expr)]
    $default  reduce using rule 9 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 33

    1 song: song . stmt END
    2     | song . stmt
    6 stmt: '^' '(' song . ')'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    ')'       shift, and go to state 41
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 9 (stmt)]
    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 9 (stmt)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 9 (stmt)]
    INTEGER   [reduce using rule 20 (expr)]
    END       reduce using rule 9 (stmt)
    END       [reduce using rule 20 (expr)]
    '^'       [reduce using rule 9 (stmt)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 9 (stmt)]
    '('       [reduce using rule 20 (expr)]
    ')'       [reduce using rule 9 (stmt)]
    ')'       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 9 (stmt)]
    '_'       [reduce using rule 20 (expr)]
    '['       [reduce using rule 9 (stmt)]
    '['       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 9 (stmt)]
    '$'       [reduce using rule 20 (expr)]
    '\n'      reduce using rule 9 (stmt)
    '\n'      [reduce using rule 20 (expr)]
    $default  reduce using rule 9 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 34

   14 expr: '(' expr ')' . '-'
   15     | '(' expr ')' . '-' '-'
   16     | '(' expr ')' . '-' '-' '-'

    '-'  shift, and go to state 42


state 35

    1 song: song . stmt END
    2     | song . stmt
    7 stmt: '_' '(' song . ')'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    ')'       shift, and go to state 43
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 9 (stmt)]
    NOTE      [reduce using rule 20 (expr)]
    VARIABLE  [reduce using rule 9 (stmt)]
    VARIABLE  [reduce using rule 20 (expr)]
    INTEGER   [reduce using rule 9 (stmt)]
    INTEGER   [reduce using rule 20 (expr)]
    END       reduce using rule 9 (stmt)
    END       [reduce using rule 20 (expr)]
    '^'       [reduce using rule 9 (stmt)]
    '^'       [reduce using rule 20 (expr)]
    '('       [reduce using rule 9 (stmt)]
    '('       [reduce using rule 20 (expr)]
    ')'       [reduce using rule 9 (stmt)]
    ')'       [reduce using rule 20 (expr)]
    '_'       [reduce using rule 9 (stmt)]
    '_'       [reduce using rule 20 (expr)]
    '['       [reduce using rule 9 (stmt)]
    '['       [reduce using rule 20 (expr)]
    '$'       [reduce using rule 9 (stmt)]
    '$'       [reduce using rule 20 (expr)]
    '\n'      reduce using rule 9 (stmt)
    '\n'      [reduce using rule 20 (expr)]
    $default  reduce using rule 9 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 36

    8 stmt: '[' stmt ']' .

    $default  reduce using rule 8 (stmt)


state 37

    5 stmt: expr newline stmt .

    $default  reduce using rule 5 (stmt)


state 38

   12 expr: note '-' '-' .
   13     | note '-' '-' . '-'

    '-'  shift, and go to state 44

    $default  reduce using rule 12 (expr)


state 39

   17 expr: VARIABLE '=' song ';' .

    $default  reduce using rule 17 (expr)


state 40

   19 expr: INTEGER '{' song '}' .

    $default  reduce using rule 19 (expr)


state 41

    6 stmt: '^' '(' song ')' .

    $default  reduce using rule 6 (stmt)


state 42

   14 expr: '(' expr ')' '-' .
   15     | '(' expr ')' '-' . '-'
   16     | '(' expr ')' '-' . '-' '-'

    '-'  shift, and go to state 45

    $default  reduce using rule 14 (expr)


state 43

    7 stmt: '_' '(' song ')' .

    $default  reduce using rule 7 (stmt)


state 44

   13 expr: note '-' '-' '-' .

    $default  reduce using rule 13 (expr)


state 45

   15 expr: '(' expr ')' '-' '-' .
   16     | '(' expr ')' '-' '-' . '-'

    '-'  shift, and go to state 46

    $default  reduce using rule 15 (expr)


state 46

   16 expr: '(' expr ')' '-' '-' '-' .

    $default  reduce using rule 16 (expr)
