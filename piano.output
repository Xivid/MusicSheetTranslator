State 1 conflicts: 9 shift/reduce, 10 reduce/reduce
State 9 conflicts: 8 shift/reduce, 1 reduce/reduce
State 11 conflicts: 1 shift/reduce
State 12 conflicts: 8 shift/reduce, 14 reduce/reduce
State 13 conflicts: 7 shift/reduce
State 29 conflicts: 9 shift/reduce, 10 reduce/reduce
State 30 conflicts: 9 shift/reduce, 10 reduce/reduce
State 31 conflicts: 9 shift/reduce, 10 reduce/reduce
State 33 conflicts: 9 shift/reduce, 10 reduce/reduce


Grammar

    0 $accept: song $end

    1 song: song stmt END
    2     | song stmt
    3     | /* empty */

    4 stmt: expr stmt
    5     | '^' '(' song ')'
    6     | '_' '(' song ')'
    7     | '[' stmt ']'
    8     | /* empty */

    9 expr: note expr
   10     | note '-'
   11     | note '-' '-'
   12     | note '-' '-' '-'
   13     | '(' expr ')' '-'
   14     | '(' expr ')' '-' '-'
   15     | '(' expr ')' '-' '-' '-'
   16     | VARIABLE '=' song ';'
   17     | '$' VARIABLE
   18     | INTEGER '{' song '}'
   19     | /* empty */

   20 note: NOTE
   21     | '_' NOTE
   22     | '^' NOTE


Terminals, with rules where they appear

$end (0) 0
'$' (36) 17
'(' (40) 5 6 13 14 15
')' (41) 5 6 13 14 15
'-' (45) 10 11 12 13 14 15
';' (59) 16
'=' (61) 16
'[' (91) 7
']' (93) 7
'^' (94) 5 22
'_' (95) 6 21
'{' (123) 18
'}' (125) 18
error (256)
NOTE (258) 20 21 22
VARIABLE (259) 16 17
INTEGER (260) 18
END (261) 1


Nonterminals, with rules where they appear

$accept (19)
    on left: 0
song (20)
    on left: 1 2 3, on right: 0 1 2 5 6 16 18
stmt (21)
    on left: 4 5 6 7 8, on right: 1 2 4 7
expr (22)
    on left: 9 10 11 12 13 14 15 16 17 18 19, on right: 4 9 13 14 15
note (23)
    on left: 20 21 22, on right: 9 10 11 12


state 0

    0 $accept: . song $end

    $default  reduce using rule 3 (song)

    song  go to state 1


state 1

    0 $accept: song . $end
    1 song: song . stmt END
    2     | song . stmt

    $end      shift, and go to state 2
    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    $end      [reduce using rule 8 (stmt)]
    $end      [reduce using rule 19 (expr)]
    NOTE      [reduce using rule 8 (stmt)]
    NOTE      [reduce using rule 19 (expr)]
    VARIABLE  [reduce using rule 8 (stmt)]
    VARIABLE  [reduce using rule 19 (expr)]
    INTEGER   [reduce using rule 8 (stmt)]
    INTEGER   [reduce using rule 19 (expr)]
    END       reduce using rule 8 (stmt)
    END       [reduce using rule 19 (expr)]
    '^'       [reduce using rule 8 (stmt)]
    '^'       [reduce using rule 19 (expr)]
    '('       [reduce using rule 8 (stmt)]
    '('       [reduce using rule 19 (expr)]
    '_'       [reduce using rule 8 (stmt)]
    '_'       [reduce using rule 19 (expr)]
    '['       [reduce using rule 8 (stmt)]
    '['       [reduce using rule 19 (expr)]
    '$'       [reduce using rule 8 (stmt)]
    '$'       [reduce using rule 19 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 2

    0 $accept: song $end .

    $default  accept


state 3

   20 note: NOTE .

    $default  reduce using rule 20 (note)


state 4

   16 expr: VARIABLE . '=' song ';'

    '='  shift, and go to state 14


state 5

   18 expr: INTEGER . '{' song '}'

    '{'  shift, and go to state 15


state 6

    5 stmt: '^' . '(' song ')'
   22 note: '^' . NOTE

    NOTE  shift, and go to state 16
    '('   shift, and go to state 17


state 7

   13 expr: '(' . expr ')' '-'
   14     | '(' . expr ')' '-' '-'
   15     | '(' . expr ')' '-' '-' '-'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 18
    '('       shift, and go to state 7
    '_'       shift, and go to state 19
    '$'       shift, and go to state 10

    $default  reduce using rule 19 (expr)

    expr  go to state 20
    note  go to state 13


state 8

    6 stmt: '_' . '(' song ')'
   21 note: '_' . NOTE

    NOTE  shift, and go to state 21
    '('   shift, and go to state 22


state 9

    7 stmt: '[' . stmt ']'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 19 (expr)]
    VARIABLE  [reduce using rule 19 (expr)]
    INTEGER   [reduce using rule 19 (expr)]
    '^'       [reduce using rule 19 (expr)]
    '('       [reduce using rule 19 (expr)]
    '_'       [reduce using rule 19 (expr)]
    '['       [reduce using rule 19 (expr)]
    ']'       reduce using rule 8 (stmt)
    ']'       [reduce using rule 19 (expr)]
    '$'       [reduce using rule 19 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 23
    expr  go to state 12
    note  go to state 13


state 10

   17 expr: '$' . VARIABLE

    VARIABLE  shift, and go to state 24


state 11

    1 song: song stmt . END
    2     | song stmt .

    END  shift, and go to state 25

    END       [reduce using rule 2 (song)]
    $default  reduce using rule 2 (song)


state 12

    4 stmt: expr . stmt

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    $end      reduce using rule 8 (stmt)
    $end      [reduce using rule 19 (expr)]
    NOTE      [reduce using rule 8 (stmt)]
    NOTE      [reduce using rule 19 (expr)]
    VARIABLE  [reduce using rule 8 (stmt)]
    VARIABLE  [reduce using rule 19 (expr)]
    INTEGER   [reduce using rule 8 (stmt)]
    INTEGER   [reduce using rule 19 (expr)]
    END       reduce using rule 8 (stmt)
    END       [reduce using rule 19 (expr)]
    '^'       [reduce using rule 8 (stmt)]
    '^'       [reduce using rule 19 (expr)]
    '('       [reduce using rule 8 (stmt)]
    '('       [reduce using rule 19 (expr)]
    ')'       reduce using rule 8 (stmt)
    ')'       [reduce using rule 19 (expr)]
    '_'       [reduce using rule 8 (stmt)]
    '_'       [reduce using rule 19 (expr)]
    '['       [reduce using rule 8 (stmt)]
    '['       [reduce using rule 19 (expr)]
    ']'       reduce using rule 8 (stmt)
    ']'       [reduce using rule 19 (expr)]
    ';'       reduce using rule 8 (stmt)
    ';'       [reduce using rule 19 (expr)]
    '$'       [reduce using rule 8 (stmt)]
    '$'       [reduce using rule 19 (expr)]
    '}'       reduce using rule 8 (stmt)
    '}'       [reduce using rule 19 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 26
    expr  go to state 12
    note  go to state 13


state 13

    9 expr: note . expr
   10     | note . '-'
   11     | note . '-' '-'
   12     | note . '-' '-' '-'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 18
    '('       shift, and go to state 7
    '_'       shift, and go to state 19
    '-'       shift, and go to state 27
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 19 (expr)]
    VARIABLE  [reduce using rule 19 (expr)]
    INTEGER   [reduce using rule 19 (expr)]
    '^'       [reduce using rule 19 (expr)]
    '('       [reduce using rule 19 (expr)]
    '_'       [reduce using rule 19 (expr)]
    '$'       [reduce using rule 19 (expr)]
    $default  reduce using rule 19 (expr)

    expr  go to state 28
    note  go to state 13


state 14

   16 expr: VARIABLE '=' . song ';'

    $default  reduce using rule 3 (song)

    song  go to state 29


state 15

   18 expr: INTEGER '{' . song '}'

    $default  reduce using rule 3 (song)

    song  go to state 30


state 16

   22 note: '^' NOTE .

    $default  reduce using rule 22 (note)


state 17

    5 stmt: '^' '(' . song ')'

    $default  reduce using rule 3 (song)

    song  go to state 31


state 18

   22 note: '^' . NOTE

    NOTE  shift, and go to state 16


state 19

   21 note: '_' . NOTE

    NOTE  shift, and go to state 21


state 20

   13 expr: '(' expr . ')' '-'
   14     | '(' expr . ')' '-' '-'
   15     | '(' expr . ')' '-' '-' '-'

    ')'  shift, and go to state 32


state 21

   21 note: '_' NOTE .

    $default  reduce using rule 21 (note)


state 22

    6 stmt: '_' '(' . song ')'

    $default  reduce using rule 3 (song)

    song  go to state 33


state 23

    7 stmt: '[' stmt . ']'

    ']'  shift, and go to state 34


state 24

   17 expr: '$' VARIABLE .

    $default  reduce using rule 17 (expr)


state 25

    1 song: song stmt END .

    $default  reduce using rule 1 (song)


state 26

    4 stmt: expr stmt .

    $default  reduce using rule 4 (stmt)


state 27

   10 expr: note '-' .
   11     | note '-' . '-'
   12     | note '-' . '-' '-'

    '-'  shift, and go to state 35

    $default  reduce using rule 10 (expr)


state 28

    9 expr: note expr .

    $default  reduce using rule 9 (expr)


state 29

    1 song: song . stmt END
    2     | song . stmt
   16 expr: VARIABLE '=' song . ';'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    ';'       shift, and go to state 36
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 8 (stmt)]
    NOTE      [reduce using rule 19 (expr)]
    VARIABLE  [reduce using rule 8 (stmt)]
    VARIABLE  [reduce using rule 19 (expr)]
    INTEGER   [reduce using rule 8 (stmt)]
    INTEGER   [reduce using rule 19 (expr)]
    END       reduce using rule 8 (stmt)
    END       [reduce using rule 19 (expr)]
    '^'       [reduce using rule 8 (stmt)]
    '^'       [reduce using rule 19 (expr)]
    '('       [reduce using rule 8 (stmt)]
    '('       [reduce using rule 19 (expr)]
    '_'       [reduce using rule 8 (stmt)]
    '_'       [reduce using rule 19 (expr)]
    '['       [reduce using rule 8 (stmt)]
    '['       [reduce using rule 19 (expr)]
    ';'       [reduce using rule 8 (stmt)]
    ';'       [reduce using rule 19 (expr)]
    '$'       [reduce using rule 8 (stmt)]
    '$'       [reduce using rule 19 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 30

    1 song: song . stmt END
    2     | song . stmt
   18 expr: INTEGER '{' song . '}'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10
    '}'       shift, and go to state 37

    NOTE      [reduce using rule 8 (stmt)]
    NOTE      [reduce using rule 19 (expr)]
    VARIABLE  [reduce using rule 8 (stmt)]
    VARIABLE  [reduce using rule 19 (expr)]
    INTEGER   [reduce using rule 8 (stmt)]
    INTEGER   [reduce using rule 19 (expr)]
    END       reduce using rule 8 (stmt)
    END       [reduce using rule 19 (expr)]
    '^'       [reduce using rule 8 (stmt)]
    '^'       [reduce using rule 19 (expr)]
    '('       [reduce using rule 8 (stmt)]
    '('       [reduce using rule 19 (expr)]
    '_'       [reduce using rule 8 (stmt)]
    '_'       [reduce using rule 19 (expr)]
    '['       [reduce using rule 8 (stmt)]
    '['       [reduce using rule 19 (expr)]
    '$'       [reduce using rule 8 (stmt)]
    '$'       [reduce using rule 19 (expr)]
    '}'       [reduce using rule 8 (stmt)]
    '}'       [reduce using rule 19 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 31

    1 song: song . stmt END
    2     | song . stmt
    5 stmt: '^' '(' song . ')'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    ')'       shift, and go to state 38
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 8 (stmt)]
    NOTE      [reduce using rule 19 (expr)]
    VARIABLE  [reduce using rule 8 (stmt)]
    VARIABLE  [reduce using rule 19 (expr)]
    INTEGER   [reduce using rule 8 (stmt)]
    INTEGER   [reduce using rule 19 (expr)]
    END       reduce using rule 8 (stmt)
    END       [reduce using rule 19 (expr)]
    '^'       [reduce using rule 8 (stmt)]
    '^'       [reduce using rule 19 (expr)]
    '('       [reduce using rule 8 (stmt)]
    '('       [reduce using rule 19 (expr)]
    ')'       [reduce using rule 8 (stmt)]
    ')'       [reduce using rule 19 (expr)]
    '_'       [reduce using rule 8 (stmt)]
    '_'       [reduce using rule 19 (expr)]
    '['       [reduce using rule 8 (stmt)]
    '['       [reduce using rule 19 (expr)]
    '$'       [reduce using rule 8 (stmt)]
    '$'       [reduce using rule 19 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 32

   13 expr: '(' expr ')' . '-'
   14     | '(' expr ')' . '-' '-'
   15     | '(' expr ')' . '-' '-' '-'

    '-'  shift, and go to state 39


state 33

    1 song: song . stmt END
    2     | song . stmt
    6 stmt: '_' '(' song . ')'

    NOTE      shift, and go to state 3
    VARIABLE  shift, and go to state 4
    INTEGER   shift, and go to state 5
    '^'       shift, and go to state 6
    '('       shift, and go to state 7
    ')'       shift, and go to state 40
    '_'       shift, and go to state 8
    '['       shift, and go to state 9
    '$'       shift, and go to state 10

    NOTE      [reduce using rule 8 (stmt)]
    NOTE      [reduce using rule 19 (expr)]
    VARIABLE  [reduce using rule 8 (stmt)]
    VARIABLE  [reduce using rule 19 (expr)]
    INTEGER   [reduce using rule 8 (stmt)]
    INTEGER   [reduce using rule 19 (expr)]
    END       reduce using rule 8 (stmt)
    END       [reduce using rule 19 (expr)]
    '^'       [reduce using rule 8 (stmt)]
    '^'       [reduce using rule 19 (expr)]
    '('       [reduce using rule 8 (stmt)]
    '('       [reduce using rule 19 (expr)]
    ')'       [reduce using rule 8 (stmt)]
    ')'       [reduce using rule 19 (expr)]
    '_'       [reduce using rule 8 (stmt)]
    '_'       [reduce using rule 19 (expr)]
    '['       [reduce using rule 8 (stmt)]
    '['       [reduce using rule 19 (expr)]
    '$'       [reduce using rule 8 (stmt)]
    '$'       [reduce using rule 19 (expr)]
    $default  reduce using rule 8 (stmt)

    stmt  go to state 11
    expr  go to state 12
    note  go to state 13


state 34

    7 stmt: '[' stmt ']' .

    $default  reduce using rule 7 (stmt)


state 35

   11 expr: note '-' '-' .
   12     | note '-' '-' . '-'

    '-'  shift, and go to state 41

    $default  reduce using rule 11 (expr)


state 36

   16 expr: VARIABLE '=' song ';' .

    $default  reduce using rule 16 (expr)


state 37

   18 expr: INTEGER '{' song '}' .

    $default  reduce using rule 18 (expr)


state 38

    5 stmt: '^' '(' song ')' .

    $default  reduce using rule 5 (stmt)


state 39

   13 expr: '(' expr ')' '-' .
   14     | '(' expr ')' '-' . '-'
   15     | '(' expr ')' '-' . '-' '-'

    '-'  shift, and go to state 42

    $default  reduce using rule 13 (expr)


state 40

    6 stmt: '_' '(' song ')' .

    $default  reduce using rule 6 (stmt)


state 41

   12 expr: note '-' '-' '-' .

    $default  reduce using rule 12 (expr)


state 42

   14 expr: '(' expr ')' '-' '-' .
   15     | '(' expr ')' '-' '-' . '-'

    '-'  shift, and go to state 43

    $default  reduce using rule 14 (expr)


state 43

   15 expr: '(' expr ')' '-' '-' '-' .

    $default  reduce using rule 15 (expr)
